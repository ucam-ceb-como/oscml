PARAMETERS SETTING SYNTAX:
    prameter_name: value_settings

VALUE_SETTINGS KEYWORDS:
    length:                            # used for defining list parameters, length can be specified in the following ways:,
            length: value              #     - where value is a fixed integer value, e.g. 4, 5 etc..
            length: param_x            #     - where 'param_x' is the name of some other already processed parameter. In the case of:
                                       #         - 'param_x' being a single integer valued parameter, its value will be used to set the
                                       #                 length of the current parameter
                                       #         - 'param_x' being a list parameter, its length will be used to set the length of the
                                       #             current parameter
            length: param_x[i]         #     - where 'param_x' is the name of some other, already processed list parameter and 'i' specifies
                                       #          'param_x' 'ith' element; in this case, the 'ith' element value of 'param_x' will be used to set
                                       #          the length of the current parameter

    values:                            # used to wrap list value parameters into a dictionary so that an extra 'length' attribute can be specified, e.g.:
            param_x1: [1,2,3,4,4,4,4,4]
            param_x2: {'values':[1,2,3,4], 'length':8}
        # 'param_x1' and 'param_x2' are equivalent to each other, the 'length' attribute in 'param_x2' causes the last item in the
        # provided list to be repeated as to satisfy the length requirement

    optuna_keys:                       # used to define parameter sampling procedure, e.g.:
            param_x1: {"type":"int","low":1,"high":10} # type (int, float, categorical), low, high, choices, etc..

    direction:                         # used to define the hpo sampling direction for list value parameters, e.g.
            direction: increasing      #   - will sample items as per optuna keys specification so that the next sample item will be
                                       #     greater or equal to the previous one
            direction: decreasing      #   - will sample items as per optuna keys specification so that the next sample item will be
                                       #     smaller or equal to the previous one
            direction: constant        #   - will sample only one item as per optuna keys specification and set all the subsequent item
                                       #     values to it

    starting_value:                    # used to define the starting value of a parameter, can be specified in the following ways:
            starting_value: value      #   - for a non list parameter (no 'length' attribute) this is equivalent to (param: value) and thus
                                       #     is not recommended
                                       #   - for a list parameter this will set its first value to 'value'
            starting_value: list       #   - this will turn a non list parameter (no 'length' attribute) to a list parameter with all values
                                       #     equal to the provided 'list'
                                       #   - for a list parameter this is will set its starting elements values to the values of the provided
                                       #     'list' subject to the parameter list and provided 'list' length constraints
            starting_value: param_x    #   - where 'param_x' is the name of some other already processed parameter. Depending on whether 'param_x'
                                       #      and the current parameter is a single value or list parameter the two above scenarios will apply
            starting_value: param_x[i] #   - where 'param_x' is the name of some other, already processed list parameter and 'i' specifies 'param_x'
                                       #     'ith' element; this is similar to (starting_value: value) option

SOME_EXAMPLES:
    # capital T letter represents parameters and values added to the hpo trial

    #1) single value parameter
    "param_1": 1
    #2) single value parameter, not recommended, simply use param_2 : 4,
    "param_2": {"starting_value":4}
    #3) single value parameter with value equal to param_1 value, thus param_3 = 1
    "param_3": {"starting_value":"param_1"}
    #4) list parameter
    "param_4": [1,3,4]
    #5) list parameter of length 100, where param_5[0:3] = [1,3,4] and param_5[3:99] = 4
    "param_5": {"values":[1,3,4],"length":100}
    #6) list parameter whose length is equal to param_3 value (because param_3 is a single value parameter) = param_1 value (= 1), thus param_6 = [1]
    "param_6": {"values":[1,3,4],"length":"param_3"}
    #7) list parameter whose length is equal to len(param_4 <- because param_4 is a list) = 3, thus param_7 = [1,3,4]
    "param_7": {"values":[1,3,4],"length":"param_4"}
    #8) list parameter whose length is equal to param_4 1st element value (param_4[1]= 3), thus param_8 = [1,3,4,4]
    "param_8": {"values":[1,3,4],"length":"param_4[2]"}
    #9) list parameter whose length is equal to 4 and the first value equal to param_1 value (= 1) and the subsequent values are sampled according to
    #   the specification, thus param_9 = [1,s1(T),s2(T),s3(T)]  where s1, s2 and s3 are numbers between 10 and 12 and (T) means that these numbers
    #   are added to optuna trial object along with param_9_1, param_9_2 and param_9_3 names
    "param_9": {"type":"int","low":1,"high":12,"starting_value":"param_1", "length":4}
    #10) parameter starting value will be set to param_4 value, since param_4 is a list, param_10 will become a list as well. No length is provided,
    #    thus no hpo sampling will take place, thus optuna_keys are redundant here and param_10 = [1,3,4]
    "param_10": {"type":"int","low":1,"high":4,"starting_value":"param_4"}
    #11) list parameter of length 6, the first values taken from param_4 and the remaining values are sampled according to the specification,
    #    thus param_11 = [1,3,4,s1(T),s2(T),s3(T)]
    "param_11": {"type":"int","low":1,"high":4,"starting_value":"param_4", "length":6}
    #12) list parameter of length param_7 (= len(param_4) = 3) and the starting value set to the param_9[2] (= s2) and all the subsequent values
    #    sampled according the specification, thus param_12 = [s1 (from param_9[2]), s2(T), s3(T)]
    "param_12": {"type":"int","low":1,"high":4,"starting_value":"param_9[2]", "length":"param_7"}
    #13) list parameter of length 4 where all the values are sampled according the specification in a decreasing direction, thus
    #    param_13 = [s1(T),s2(T)<=s1,s3(T)<=s2,s4(T)<=s3]
    "param_13": {"type":"int","low":1,"high":10,"length":4,"direction":"decreasing"}
    #14) list parameter of length 4 where all the values are sampled according the specification in an increasing direction, thus
    #    param_14 = [s1(T),s2(T)>=s1,s3(T)>=s2,s4(T)>=s3]
    "param_14": {"type":"int","low":1,"high":10,"length":4,"direction":"increasing"}
    #15) list parameter of length 4 where all the values are sampled according the specification in a constant direction, thus
    #    param_14 = [s1(T),s2==s1,s3==s1,s4==s1] - note that in this case only s1 is added to optuna trial object, as s2-s4 depend
    #    on s1 and do not need to be added
    "param_15": {"type":"int","low":1,"high":10,"length":4,"direction":"constant"}
    #16) list parameter of length 4, where the first value is set to 1 and and the remaining values are sampled according to the specification,
    #    note that in this case the constant sampling direction prevents any sampling, all the subsequent values will be equal to the starting
    #    value (optuna keys are then redundant here), thus param_16 = [1,1,1,1] (this is not a recommended option)
    "param_16": {"type":"int","low":1,"high":10,"length":4,"direction":"constant","starting_value":[1]}
    #17) list parameter of length 4, where the first value is set to 1 and the remaining values are sampled according to the specification, note that
    #    in this case the increasing sampling direction will try to sample values equal to or greater than the previous value, thus
    #    param_17 = [1,s1(T)>=1,s2(T)>=s1,s3(T)>=s2]
    "param_17": {"type":"int","low":1,"high":10,"length":4,"direction":"increasing","starting_value":[1]}
    #18) list parameter of length 4, where the first value is set to 1 and the remaining values are sampled according to the specification, note that
    #    in this case the decreasing sampling direction will try to sample values equal to or smaller than the previous value, thus
    #    param_18 = [1,s1(T)<=1,s2(T)<=s1,s3(T)<=s2]
    "param_18": {"type":"int","low":1,"high":10,"length":4,"direction":"decreasing","starting_value":[10]}
    #19) list parameter of length 4, where the first value is set to 2, thus param_19 = [2,2,2,2]
    "param_19": {"length":4,"starting_value":2}
    #20) list parameter of length 4, where the first value is set to [2,3,5] thus param_20 = [2,3,5,5]
    "param_20": {"length":4,"starting_value":[2,3,5]}
